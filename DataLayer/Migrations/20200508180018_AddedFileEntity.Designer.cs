// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200508180018_AddedFileEntity")]
    partial class AddedFileEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("DataLayer.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseAssemblyUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AutoNumber");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("PIDId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PIDId");

                    b.ToTable("BaseAssemblyUnit");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseAssemblyUnit");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithCoating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseAnticorrosiveCoatingId");

                    b.Property<int>("BaseValveId");

                    b.HasKey("Id");

                    b.HasIndex("BaseAnticorrosiveCoatingId");

                    b.HasIndex("BaseValveId");

                    b.ToTable("BaseValveWithCoatings");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewNut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValveId");

                    b.Property<int>("ScrewNutAmount");

                    b.Property<int>("ScrewNutId");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("ScrewNutId");

                    b.ToTable("BaseValveWithScrewNuts");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewStud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValveId");

                    b.Property<int>("ScrewStudAmount");

                    b.Property<int>("ScrewStudId");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("ScrewStudId");

                    b.ToTable("BaseValveWithScrewStuds");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssemblyUnitSealingId");

                    b.Property<int>("BaseValveId");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyUnitSealingId");

                    b.HasIndex("BaseValveId");

                    b.ToTable("BaseValveWithSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSpring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValveId");

                    b.Property<int>("SpringAmount");

                    b.Property<int>("SpringId");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("SpringId");

                    b.ToTable("BaseValveWithSprings");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.ReverseShutterWithCoating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseAnticorrosiveCoatingId");

                    b.Property<int>("ReverseShutterId");

                    b.HasKey("Id");

                    b.HasIndex("BaseAnticorrosiveCoatingId");

                    b.HasIndex("ReverseShutterId");

                    b.ToTable("ReverseShutterWithCoatings");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.AssemblyUnitSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("AmountRemaining");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Series");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("AssemblyUnitSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BallValve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BaseValveId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Designation");

                    b.Property<string>("Diameter");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Pressure");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.ToTable("BallValves");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BaseCastingCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("BaseCastingCase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseCastingCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BaseValveCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("RunningSleeveId");

                    b.Property<int?>("SpindleId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("RunningSleeveId")
                        .IsUnique();

                    b.HasIndex("SpindleId")
                        .IsUnique();

                    b.ToTable("BaseValveCover");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Shutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterDisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("ShutterId");

                    b.ToTable("ShutterDisks");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("ShutterId");

                    b.ToTable("ShutterGuides");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CounterFlange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BaseValveId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("ThicknessJoining");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("CounterFlanges");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CoverSealingRing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("CoverSealingRings");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.FrontalSaddleSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("AmountRemaining");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Series");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("FrontalSaddleSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Gate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("PIDId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("PIDId");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Nozzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CastingCaseId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Diameter");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("Thickness");

                    b.Property<string>("ThicknessJoin");

                    b.HasKey("Id");

                    b.HasIndex("CastingCaseId");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("Nozzles");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.BronzeSleeveShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ReverseShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("ReverseShutterId");

                    b.ToTable("BronzeSleeveShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("ShaftShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.SlamShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("SlamShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.SteelSleeveShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ReverseShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("ReverseShutterId");

                    b.ToTable("SteelSleeveShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.StubShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ReverseShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("ReverseShutterId");

                    b.ToTable("StubShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.RunningSleeve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("RunningSleeves");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Saddle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BaseValveId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("Saddles");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SaddleWithSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FrontalSaddleSealingId");

                    b.Property<int>("SaddleId");

                    b.HasKey("Id");

                    b.HasIndex("FrontalSaddleSealingId");

                    b.HasIndex("SaddleId");

                    b.ToTable("SaddleWithSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ScrewNut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("AmountRemaining");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Hardness");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("Thread");

                    b.HasKey("Id");

                    b.ToTable("ScrewNuts");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ScrewStud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("AmountRemaining");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Hardness");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("Thread");

                    b.HasKey("Id");

                    b.ToTable("ScrewStuds");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ShearPin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BaseValveId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Diameter");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("TensileStrength");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.ToTable("ShearPins");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Spindle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("Spindles");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Spring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("AmountRemaining");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Springs");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("CaseBottoms");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseEdge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<int?>("WeldGateValveCaseId");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("WeldGateValveCaseId");

                    b.ToTable("CaseEdges");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("CaseFlanges");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("CoverFlanges");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<int?>("CoverSealingRingId");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CoverSealingRingId")
                        .IsUnique();

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("CoverSleeves");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<int?>("WeldGateValveCaseId");

                    b.Property<int?>("WeldNozzleId");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("WeldGateValveCaseId");

                    b.HasIndex("WeldNozzleId")
                        .IsUnique();

                    b.ToTable("FrontWalls");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.SideWall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<int?>("WeldGateValveCaseId");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.HasIndex("WeldGateValveCaseId");

                    b.ToTable("SideWalls");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CaseBottomId");

                    b.Property<int?>("CaseFlangeId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Diameter");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("Thickness");

                    b.HasKey("Id");

                    b.HasIndex("CaseBottomId")
                        .IsUnique();

                    b.HasIndex("CaseFlangeId")
                        .IsUnique();

                    b.ToTable("WeldGateValveCase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WeldGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Drawing");

                    b.Property<int?>("MetalMaterialId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("WeldNozzles");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Factory");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("BaseAnticorrosiveCoatings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseAnticorrosiveCoating");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.ControlWeld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BeginingDate");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<string>("FirstMaterial");

                    b.Property<string>("MechanicalPropertiesReport");

                    b.Property<string>("MetallographicPropertiesReport");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("SecondMaterial");

                    b.Property<string>("Size");

                    b.Property<string>("Stamp");

                    b.Property<string>("Status");

                    b.Property<string>("Welder");

                    b.Property<string>("WeldingMethod");

                    b.HasKey("Id");

                    b.ToTable("ControlWelds");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.MetalMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstSize");

                    b.Property<string>("Material");

                    b.Property<string>("MaterialCertificateNumber");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("SecondSize");

                    b.Property<string>("Status");

                    b.Property<string>("ThirdSize");

                    b.HasKey("Id");

                    b.ToTable("MetalMaterials");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MetalMaterial");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.WeldingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Comment");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("WeldingMaterials");
                });

            modelBuilder.Entity("DataLayer.Entities.Periodical.NDTControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("LastControl");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("NextControl");

                    b.Property<int?>("ProductTypeId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("NDTControls");
                });

            modelBuilder.Entity("DataLayer.Entities.Periodical.WeldingProcedures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("LastControl");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("NextControl");

                    b.Property<int?>("ProductTypeId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("WeldingProcedures");
                });

            modelBuilder.Entity("DataLayer.Files.AssemblyUnitSealsWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssemblyUnitSealingId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyUnitSealingId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("AssemblyUnitSealsWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.BallValvesWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BallValveId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("BallValveId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("BallValvesWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.BaseAnticorrosiveCoatingWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseAnticorrosiveCoatingId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("BaseAnticorrosiveCoatingId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("BaseAnticorrosiveCoatingWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.BaseAssemblyUnitWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseAssemblyUnitId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("BaseAssemblyUnitId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("BaseAssemblyUnitWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.BaseCastingCaseWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseCastingCaseId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("BaseCastingCaseId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("BaseCastingCaseWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.BaseValveCoverWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValveCoverId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveCoverId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("BaseValveCoverWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.BronzeSleeveShutterWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BronzeSleeveShutterId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("BronzeSleeveShutterId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("BronzeSleeveShutterWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.CaseBottomWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseBottomId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("CaseBottomId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("CaseBottomWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.CaseEdgeWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseEdgeId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("CaseEdgeId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("CaseEdgeWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.CaseFlangeWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseFlangeId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFlangeId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("CaseFlangeWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ControlWeldWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ControlWeldId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("ControlWeldId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("ControlWeldWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.CounterFlangeWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CounterFlangeId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("CounterFlangeId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("CounterFlangeWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.CoverFlangeWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CoverFlangeId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("CoverFlangeId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("CoverFlangeWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.CoverSealingRingWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CoverSealingRingId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("CoverSealingRingId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("CoverSealingRingWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.CoverSleeveWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CoverSleeveId");

                    b.Property<int>("ElectronicDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("CoverSleeveId");

                    b.HasIndex("ElectronicDocumentId");

                    b.ToTable("CoverSleeveWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ElectronicDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("FilePath");

                    b.Property<byte>("FileType");

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.ToTable("ElectronicDocuments");
                });

            modelBuilder.Entity("DataLayer.Files.FrontWallWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("FrontWallId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("FrontWallId");

                    b.ToTable("FrontWallWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.FrontalSaddleSealingWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("FrontalSaddleSealingId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("FrontalSaddleSealingId");

                    b.ToTable("FrontalSaddleSealingWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.GateWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("GateId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("GateId");

                    b.ToTable("GateWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.MetalMaterialWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("MetalMaterialId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("MetalMaterialId");

                    b.ToTable("MetalMaterialWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.NozzleWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("NozzleId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("NozzleId");

                    b.ToTable("NozzleWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.PIDWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("PIDId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("PIDId");

                    b.ToTable("PIDWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.RunningSleeveWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("RunningSleeveId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("RunningSleeveId");

                    b.ToTable("RunningSleeveWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.SaddleWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("SaddleId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("SaddleId");

                    b.ToTable("SaddleWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ScrewNutWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("ScrewNutId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("ScrewNutId");

                    b.ToTable("ScrewNutWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ScrewStudWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("ScrewStudId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("ScrewStudId");

                    b.ToTable("ScrewStudWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ShaftShutterWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("ShaftShutterId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("ShaftShutterId");

                    b.ToTable("ShaftShutterWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ShearPinWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("ShearPinId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("ShearPinId");

                    b.ToTable("ShearPinWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ShutterDiskWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("ShutterDiskId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("ShutterDiskId");

                    b.ToTable("ShutterDiskWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ShutterGuideWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("ShutterGuideId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("ShutterGuideId");

                    b.ToTable("ShutterGuideWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.ShutterWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("ShutterId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("ShutterId");

                    b.ToTable("ShutterWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.SideWallWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("SideWallId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("SideWallId");

                    b.ToTable("SideWallWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.SlamShutterWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("SlamShutterId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("SlamShutterId");

                    b.ToTable("SlamShutterWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.SpecificationWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("SpecificationId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("SpecificationWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.SpindleWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("SpindleId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("SpindleId");

                    b.ToTable("SpindleWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.SpringWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("SpringId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("SpringId");

                    b.ToTable("SpringWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.SteelSleeveShutterWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("SteelSleeveShutterId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("SteelSleeveShutterId");

                    b.ToTable("SteelSleeveShutterWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.StubShutterWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("StubShutterId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("StubShutterId");

                    b.ToTable("StubShutterWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.WeldGateValveCaseWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("WeldGateValveCaseId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("WeldGateValveCaseId");

                    b.ToTable("WeldGateValveCaseWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.WeldNozzleWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("WeldNozzleId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("WeldNozzleId");

                    b.ToTable("WeldNozzleWithFiles");
                });

            modelBuilder.Entity("DataLayer.Files.WeldingMaterialWithFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ElectronicDocumentId");

                    b.Property<int>("WeldingMaterialId");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicDocumentId");

                    b.HasIndex("WeldingMaterialId");

                    b.ToTable("WeldingMaterialWithFiles");
                });

            modelBuilder.Entity("DataLayer.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apointment");

                    b.Property<string>("Department");

                    b.Property<string>("Name");

                    b.Property<string>("Subdivision");

                    b.HasKey("Id");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CastGateValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CastGateValveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CoatingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoatingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CompactGateValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CompactGateValveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.ReverseShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ReverseShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.SheetGateValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SheetGateValveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.AssemblyUnitSealingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("AssemblyUnitSealingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.BallValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("BallValveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CastGateValveCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCoverJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CastGateValveCoverJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterDiskJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShutterDiskJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterGuideJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShutterGuideJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CounterFlangeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CounterFlangeJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CoverSealingRingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoverSealingRingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.FrontalSaddleSealingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("FrontalSaddleSealingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.GateJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("GateJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.NozzleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("NozzleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.BronzeSleeveShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("BronzeSleeveShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ReverseShutterCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ReverseShutterCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ShaftShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShaftShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SlamShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SlamShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SteelSleeveShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SteelSleeveShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.StubShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("StubShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.RunningSleeveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("RunningSleeveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SaddleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SaddleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewNutJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ScrewNutJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewStudJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ScrewStudJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ShearPinJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShearPinJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpindleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SpindleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpringJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SpringJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseBottomJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CaseBottomJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseEdgeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CaseEdgeJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseFlangeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CaseFlangeJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CompactGateValveCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCoverJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CompactGateValveCoverJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverFlangeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoverFlangeJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverSleeveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoverSleeveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.FrontWallJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("FrontWallJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SheetGateValveCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCoverJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SheetGateValveCoverJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SideWallJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SideWallJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.WeldNozzleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("WeldNozzleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.FactoryInspectionJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("FactoryInspectionJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.JournalNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsClosed");

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.ToTable("JournalNumbers");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.AbovegroundCoatingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("AbovegroundCoatingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.AbrasiveMaterialJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("AbrasiveMaterialJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.UndercoatJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("UndercoatJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.UndergroundCoatingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("UndergroundCoatingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.ControlWeldJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ControlWeldJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.ForgingMaterialJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ForgingMaterialJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.PipeMaterialJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("PipeMaterialJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.RolledMaterialJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("RolledMaterialJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.SheetMaterialJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SheetMaterialJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.StoresControlJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("StoresControlJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.WeldingMaterialJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("WeldingMaterialJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.PIDJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("PIDJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingChemicalCompositionJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoatingChemicalCompositionJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingPlasticityJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoatingPlasticityJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingPorosityJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoatingPorosityJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingProtectivePropertiesJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoatingProtectivePropertiesJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.DegreasingChemicalCompositionJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("DegreasingChemicalCompositionJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.NDTControlJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("NDTControlJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.WeldingProceduresJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("RemarkClosed");

                    b.Property<string>("RemarkIssued");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("WeldingProceduresJournals");
                });

            modelBuilder.Entity("DataLayer.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Входной контроль"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Механическая обработка"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Неразрушающий контроль"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Сборка"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ПСИ"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ВИК после ПСИ"
                        },
                        new
                        {
                            Id = 7,
                            Name = "АКП"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Документация"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Отгрузка"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Входной контроль (НК)"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Сборка/Сварка"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Подготовка к сборке"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Наплавка"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Подготовка поверхности"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Покрытие"
                        });
                });

            modelBuilder.Entity("DataLayer.PID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Amount");

                    b.Property<int?>("AmountShipped");

                    b.Property<string>("Climatic");

                    b.Property<string>("Comment");

                    b.Property<string>("ConnectionType");

                    b.Property<string>("Consignee");

                    b.Property<string>("DN");

                    b.Property<string>("Description");

                    b.Property<string>("Designation");

                    b.Property<string>("DriveType");

                    b.Property<string>("EarthquakeResistance");

                    b.Property<string>("Number");

                    b.Property<string>("PN");

                    b.Property<int?>("ProductTypeId");

                    b.Property<string>("Purpose");

                    b.Property<string>("STD1");

                    b.Property<string>("STD2");

                    b.Property<DateTime?>("ShippingDate");

                    b.Property<int?>("SpecificationId");

                    b.Property<string>("TechDocumentation");

                    b.Property<int?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("PIDs");
                });

            modelBuilder.Entity("DataLayer.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("DataLayer.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Consignee");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Facility");

                    b.Property<bool>("IsSupervisionRequest");

                    b.Property<string>("Number");

                    b.Property<string>("Program");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.BaseTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("OperationName");

                    b.Property<int?>("OperationNameId");

                    b.Property<string>("Point");

                    b.Property<int?>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("OperationNameId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("BaseTCP");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseTCP");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseAssemblyUnit");

                    b.Property<int?>("GateId");

                    b.Property<int?>("ShutterId");

                    b.HasIndex("GateId")
                        .IsUnique();

                    b.HasIndex("ShutterId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("BaseValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.ReverseShutter", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseAssemblyUnit");

                    b.Property<int?>("ReverseShutterCaseId");

                    b.Property<int?>("ShaftShutterId");

                    b.Property<int?>("SlamShutterId");

                    b.HasIndex("ReverseShutterCaseId")
                        .IsUnique();

                    b.HasIndex("ShaftShutterId")
                        .IsUnique();

                    b.HasIndex("SlamShutterId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ReverseShutter");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.BaseCastingCase");

                    b.HasDiscriminator().HasValue("CastGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.ReverseShutterCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.BaseCastingCase");

                    b.HasDiscriminator().HasValue("ReverseShutterCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.BaseValveCover");

                    b.Property<int?>("CoverSealingRingId");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.HasIndex("CoverSealingRingId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("CastGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.BaseValveCover");

                    b.Property<int?>("CoverFlangeId");

                    b.Property<int?>("CoverSleeveId");

                    b.HasIndex("CoverFlangeId")
                        .IsUnique();

                    b.HasIndex("CoverSleeveId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WeldGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase");

                    b.HasDiscriminator().HasValue("CompactGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase");

                    b.HasDiscriminator().HasValue("SheetGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.AnticorrosiveCoating.AbovegroundCoating", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating");

                    b.Property<string>("Color");

                    b.HasDiscriminator().HasValue("AbovegroundCoating");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.AnticorrosiveCoating.AbrasiveMaterial", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating");

                    b.HasDiscriminator().HasValue("AbrasiveMaterial");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.AnticorrosiveCoating.Undercoat", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating");

                    b.HasDiscriminator().HasValue("Undercoat");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.AnticorrosiveCoating.UndergroundCoating", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating");

                    b.HasDiscriminator().HasValue("UndergroundCoating");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.ForgingMaterial", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.MetalMaterial");

                    b.Property<string>("MetalCharge");

                    b.HasDiscriminator().HasValue("ForgingMaterial");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.PipeMaterial", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.MetalMaterial");

                    b.HasDiscriminator().HasValue("PipeMaterial");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.RolledMaterial", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.MetalMaterial");

                    b.HasDiscriminator().HasValue("RolledMaterial");
                });

            modelBuilder.Entity("DataLayer.Entities.Materials.SheetMaterial", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Materials.MetalMaterial");

                    b.HasDiscriminator().HasValue("SheetMaterial");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.CastGateValveTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CastGateValveTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.CoatingTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoatingTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.CompactGateValveTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CompactGateValveTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.ReverseShutterTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ReverseShutterTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.SheetGateValveTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SheetGateValveTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.AssemblyUnitSealingTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("AssemblyUnitSealingTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.BallValveTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("BallValveTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCaseTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CastGateValveCaseTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCoverTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CastGateValveCoverTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterDiskTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ShutterDiskTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterGuideTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ShutterGuideTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ShutterTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CounterFlangeTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CounterFlangeTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CoverSealingRingTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoverSealingRingTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.FrontalSaddleSealingTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("FrontalSaddleSealingTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.GateTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("GateTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.NozzleTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("NozzleTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.BronzeSleeveShutterTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("BronzeSleeveShutterTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ReverseShutterCaseTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ReverseShutterCaseTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ShaftShutterTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ShaftShutterTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SlamShutterTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SlamShutterTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SteelSleeveShutterTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SteelSleeveShutterTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.StubShutterTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("StubShutterTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.RunningSleeveTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("RunningSleeveTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.SaddleTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SaddleTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ScrewNutTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ScrewNutTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ScrewStudTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ScrewStudTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ShearPinTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ShearPinTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.SpindleTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SpindleTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.SpringTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SpringTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseBottomTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CaseBottomTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseEdgeTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CaseEdgeTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseFlangeTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CaseFlangeTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCaseTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CompactGateValveCaseTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCoverTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CompactGateValveCoverTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverFlangeTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoverFlangeTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverSleeveTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoverSleeveTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.FrontWallTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("FrontWallTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCaseTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SheetGateValveCaseTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCoverTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SheetGateValveCoverTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SideWallTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("SideWallTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.WeldNozzleTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("WeldNozzleTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.FactoryInspectionTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("FactoryInspectionTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Materials.AnticorrosiveCoating.AnticorrosiveCoatingTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("AnticorrosiveCoatingTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Materials.ControlWeldTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("ControlWeldTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Materials.MetalMaterialTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("MetalMaterialTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Materials.StoresControlTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("StoresControlTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Materials.WeldingMaterialTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("WeldingMaterialTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.PIDTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("PIDTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Periodical.CoatingChemicalCompositionTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoatingChemicalCompositionTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Periodical.CoatingPlasticityTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoatingPlasticityTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Periodical.CoatingPorosityTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoatingPorosityTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Periodical.CoatingProtectivePropertiesTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("CoatingProtectivePropertiesTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Periodical.DegreasingChemicalCompositionTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("DegreasingChemicalCompositionTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Periodical.NDTControlTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("NDTControlTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Periodical.WeldingProceduresTCP", b =>
                {
                    b.HasBaseType("DataLayer.TechnicalControlPlans.BaseTCP");

                    b.HasDiscriminator().HasValue("WeldingProceduresTCP");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseWeldValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseValve");

                    b.Property<int?>("WeldGateValveCaseId");

                    b.Property<int?>("WeldGateValveCoverId");

                    b.HasIndex("WeldGateValveCaseId")
                        .IsUnique();

                    b.HasIndex("WeldGateValveCoverId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("BaseWeldValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.CastGateValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseValve");

                    b.Property<int?>("CastGateValveCaseId");

                    b.Property<int?>("CastGateValveCoverId");

                    b.HasIndex("CastGateValveCaseId")
                        .IsUnique();

                    b.HasIndex("CastGateValveCoverId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("CastGateValve");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCover", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover");

                    b.HasDiscriminator().HasValue("CompactGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCover", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover");

                    b.HasDiscriminator().HasValue("SheetGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.CompactGateValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseWeldValve");

                    b.HasDiscriminator().HasValue("CompactGateValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.SheetGateValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseWeldValve");

                    b.HasDiscriminator().HasValue("SheetGateValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseAssemblyUnit", b =>
                {
                    b.HasOne("DataLayer.PID", "PID")
                        .WithMany("BaseAssemblyUnits")
                        .HasForeignKey("PIDId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithCoating", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating", "BaseAnticorrosiveCoating")
                        .WithMany("BaseValveWithCoatings")
                        .HasForeignKey("BaseAnticorrosiveCoatingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithCoatings")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewNut", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithScrewNuts")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ScrewNut", "ScrewNut")
                        .WithMany("BaseValveWithScrewNuts")
                        .HasForeignKey("ScrewNutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewStud", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithScrewStuds")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ScrewStud", "ScrewStud")
                        .WithMany("BaseValveWithScrewStuds")
                        .HasForeignKey("ScrewStudId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSealing", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.AssemblyUnitSealing", "AssemblyUnitSealing")
                        .WithMany("BaseValveWithSeals")
                        .HasForeignKey("AssemblyUnitSealingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithSeals")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSpring", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithSprings")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Spring", "Spring")
                        .WithMany("BaseValveWithSprings")
                        .HasForeignKey("SpringId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.ReverseShutterWithCoating", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating", "BaseAnticorrosiveCoating")
                        .WithMany("ReverseShutterWithCoatings")
                        .HasForeignKey("BaseAnticorrosiveCoatingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutter")
                        .WithMany("ReverseShutterWithCoatings")
                        .HasForeignKey("ReverseShutterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BallValve", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BallValves")
                        .HasForeignKey("BaseValveId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BaseValveCover", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.RunningSleeve", "RunningSleeve")
                        .WithOne("BaseValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.BaseValveCover", "RunningSleeveId");

                    b.HasOne("DataLayer.Entities.Detailing.Spindle", "Spindle")
                        .WithOne("BaseValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.BaseValveCover", "SpindleId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterDisk", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("ShutterDisks")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Shutter")
                        .WithMany("ShutterDisks")
                        .HasForeignKey("ShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterGuide", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("ShutterGuides")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Shutter")
                        .WithMany("ShutterGuides")
                        .HasForeignKey("ShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CounterFlange", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("CounterFlanges")
                        .HasForeignKey("BaseValveId");

                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("CounterFlanges")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CoverSealingRing", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("CoverSealingRings")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Gate", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("Gates")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.PID", "PID")
                        .WithMany("Gates")
                        .HasForeignKey("PIDId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Nozzle", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.BaseCastingCase", "CastingCase")
                        .WithMany("Nozzles")
                        .HasForeignKey("CastingCaseId");

                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("Nozzles")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.BronzeSleeveShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("BronzeSleeveShutters")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutter")
                        .WithMany("BronzeSleeveShutters")
                        .HasForeignKey("ReverseShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("ShaftShutters")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.SteelSleeveShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("SteelSleeveShutters")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutter")
                        .WithMany("SteelSleeveShutters")
                        .HasForeignKey("ReverseShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.StubShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("StubShutters")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutter")
                        .WithMany("StubShutters")
                        .HasForeignKey("ReverseShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Saddle", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("Saddles")
                        .HasForeignKey("BaseValveId");

                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("Saddles")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SaddleWithSealing", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.FrontalSaddleSealing", "FrontalSaddleSealing")
                        .WithMany("SaddleWithSealings")
                        .HasForeignKey("FrontalSaddleSealingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Saddle", "Saddle")
                        .WithMany("SaddleWithSealings")
                        .HasForeignKey("SaddleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ShearPin", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("ShearPins")
                        .HasForeignKey("BaseValveId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Spindle", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("Spindles")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("CaseBottoms")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseEdge", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("CaseEdges")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "WeldGateValveCase")
                        .WithMany("CaseEdges")
                        .HasForeignKey("WeldGateValveCaseId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("CaseFlanges")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("CoverFlanges")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CoverSealingRing", "CoverSealingRing")
                        .WithOne("CoverSleeve")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", "CoverSealingRingId");

                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("CoverSleeves")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("FrontWalls")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "WeldGateValveCase")
                        .WithMany("FrontWalls")
                        .HasForeignKey("WeldGateValveCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", "WeldNozzle")
                        .WithOne("FrontWall")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", "WeldNozzleId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.SideWall", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("SideWalls")
                        .HasForeignKey("MetalMaterialId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "WeldGateValveCase")
                        .WithMany("SideWalls")
                        .HasForeignKey("WeldGateValveCaseId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", "CaseBottom")
                        .WithOne("WeldGateValveCase")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "CaseBottomId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", "CaseFlange")
                        .WithOne("WeldGateValveCase")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "CaseFlangeId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("WeldNozzles")
                        .HasForeignKey("MetalMaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.Periodical.NDTControl", b =>
                {
                    b.HasOne("DataLayer.ProductType", "ProductType")
                        .WithMany("NDTControls")
                        .HasForeignKey("ProductTypeId");
                });

            modelBuilder.Entity("DataLayer.Entities.Periodical.WeldingProcedures", b =>
                {
                    b.HasOne("DataLayer.ProductType", "ProductType")
                        .WithMany("WeldingProcedures")
                        .HasForeignKey("ProductTypeId");
                });

            modelBuilder.Entity("DataLayer.Files.AssemblyUnitSealsWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.AssemblyUnitSealing", "AssemblyUnitSealing")
                        .WithMany()
                        .HasForeignKey("AssemblyUnitSealingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("AssemblyUnitSeals")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.BallValvesWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.BallValve", "BallValves")
                        .WithMany("Files")
                        .HasForeignKey("BallValveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ballValves")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.BaseAnticorrosiveCoatingWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.AnticorrosiveCoating.BaseAnticorrosiveCoating", "BaseAnticorrosiveCoating")
                        .WithMany("Files")
                        .HasForeignKey("BaseAnticorrosiveCoatingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("BaseAnticorrosiveCoatings")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.BaseAssemblyUnitWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseAssemblyUnit", "BaseAssemblyUnit")
                        .WithMany("Files")
                        .HasForeignKey("BaseAssemblyUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("BaseAssemblyUnits")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.BaseCastingCaseWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.BaseCastingCase", "BaseCastingCase")
                        .WithMany("Files")
                        .HasForeignKey("BaseCastingCaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("BaseCastingCases")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.BaseValveCoverWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.BaseValveCover", "BaseValveCover")
                        .WithMany("Files")
                        .HasForeignKey("BaseValveCoverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("BaseValveCovers")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.BronzeSleeveShutterWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.BronzeSleeveShutter", "BronzeSleeveShutter")
                        .WithMany("Files")
                        .HasForeignKey("BronzeSleeveShutterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("BronzeSleeveShutters")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.CaseBottomWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", "CaseBottom")
                        .WithMany("Files")
                        .HasForeignKey("CaseBottomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("CaseBottoms")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.CaseEdgeWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseEdge", "CaseEdge")
                        .WithMany("Files")
                        .HasForeignKey("CaseEdgeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("CaseEdges")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.CaseFlangeWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", "CaseFlange")
                        .WithMany("Files")
                        .HasForeignKey("CaseFlangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("CaseFlanges")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ControlWeldWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.ControlWeld", "ControlWeld")
                        .WithMany("Files")
                        .HasForeignKey("ControlWeldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ControlWelds")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.CounterFlangeWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CounterFlange", "CounterFlange")
                        .WithMany("Files")
                        .HasForeignKey("CounterFlangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("CounterFlanges")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.CoverFlangeWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", "CoverFlange")
                        .WithMany("Files")
                        .HasForeignKey("CoverFlangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("CoverFlanges")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.CoverSealingRingWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CoverSealingRing", "CoverSealingRing")
                        .WithMany("Files")
                        .HasForeignKey("CoverSealingRingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("CoverSealingRings")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.CoverSleeveWithFile", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", "CoverSleeve")
                        .WithMany("Files")
                        .HasForeignKey("CoverSleeveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("CoverSleeves")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.FrontWallWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("FrontWalls")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", "FrontWall")
                        .WithMany("Files")
                        .HasForeignKey("FrontWallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.FrontalSaddleSealingWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("FrontalSaddleSeals")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.FrontalSaddleSealing", "FrontalSaddleSealing")
                        .WithMany("Files")
                        .HasForeignKey("FrontalSaddleSealingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.GateWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("Gates")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Gate", "Gate")
                        .WithMany("Files")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.MetalMaterialWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("MetalMaterials")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Materials.MetalMaterial", "MetalMaterial")
                        .WithMany("Files")
                        .HasForeignKey("MetalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.NozzleWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("Nozzles")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Nozzle", "Nozzle")
                        .WithMany("Files")
                        .HasForeignKey("NozzleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.PIDWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("PIDs")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.PID", "PID")
                        .WithMany()
                        .HasForeignKey("PIDId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.RunningSleeveWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("RunningSleeves")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.RunningSleeve", "RunningSleeve")
                        .WithMany("Files")
                        .HasForeignKey("RunningSleeveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.SaddleWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("Saddles")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Saddle", "Saddle")
                        .WithMany("Files")
                        .HasForeignKey("SaddleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ScrewNutWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ScrewNuts")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ScrewNut", "ScrewNut")
                        .WithMany("Files")
                        .HasForeignKey("ScrewNutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ScrewStudWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ScrewStuds")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ScrewStud", "ScrewStud")
                        .WithMany("Files")
                        .HasForeignKey("ScrewStudId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ShaftShutterWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ShaftShutters")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", "ShaftShutter")
                        .WithMany("Files")
                        .HasForeignKey("ShaftShutterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ShearPinWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ShearPins")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ShearPin", "ShearPin")
                        .WithMany("Files")
                        .HasForeignKey("ShearPinId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ShutterDiskWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ShutterDisks")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterDisk", "ShutterDisk")
                        .WithMany("Files")
                        .HasForeignKey("ShutterDiskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ShutterGuideWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("ShutterGuides")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterGuide", "ShutterGuide")
                        .WithMany("Files")
                        .HasForeignKey("ShutterGuideId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.ShutterWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("Shutters")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Shutter")
                        .WithMany("Files")
                        .HasForeignKey("ShutterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.SideWallWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("SideWalls")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.SideWall", "SideWall")
                        .WithMany("Files")
                        .HasForeignKey("SideWallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.SlamShutterWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("SlamShutters")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SlamShutter", "SlamShutter")
                        .WithMany("Files")
                        .HasForeignKey("SlamShutterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.SpecificationWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("Specifications")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Specification", "Specification")
                        .WithMany("Files")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.SpindleWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("Spindles")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Spindle", "Spindle")
                        .WithMany("Files")
                        .HasForeignKey("SpindleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.SpringWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("Springs")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Spring", "Spring")
                        .WithMany("Files")
                        .HasForeignKey("SpringId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.SteelSleeveShutterWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("SteelSleeveShutters")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SteelSleeveShutter", "SteelSleeveShutter")
                        .WithMany("Files")
                        .HasForeignKey("SteelSleeveShutterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.StubShutterWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("StubShutters")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.StubShutter", "StubShutter")
                        .WithMany("Files")
                        .HasForeignKey("StubShutterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.WeldGateValveCaseWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("WeldGateValveCases")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "WeldGateValveCase")
                        .WithMany("Files")
                        .HasForeignKey("WeldGateValveCaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.WeldNozzleWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("WeldNozzles")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", "WeldNozzle")
                        .WithMany("Files")
                        .HasForeignKey("WeldNozzleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Files.WeldingMaterialWithFile", b =>
                {
                    b.HasOne("DataLayer.Files.ElectronicDocument", "ElectronicDocument")
                        .WithMany("WeldingMaterials")
                        .HasForeignKey("ElectronicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Materials.WeldingMaterial", "WeldingMaterial")
                        .WithMany("Files")
                        .HasForeignKey("WeldingMaterialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CastGateValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.CastGateValve", "Entity")
                        .WithMany("CastGateValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CastGateValveJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.CastGateValveTCP", "EntityTCP")
                        .WithMany("CastGateValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CoatingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseAssemblyUnit", "Entity")
                        .WithMany("CoatingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoatingJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.CoatingTCP", "EntityTCP")
                        .WithMany("CoatingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CompactGateValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.CompactGateValve", "Entity")
                        .WithMany("CompactGateValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CompactGateValveJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.CompactGateValveTCP", "EntityTCP")
                        .WithMany("CompactGateValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.ReverseShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "Entity")
                        .WithMany("ReverseShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ReverseShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.ReverseShutterTCP", "EntityTCP")
                        .WithMany("ReverseShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.SheetGateValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.SheetGateValve", "Entity")
                        .WithMany("SheetGateValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SheetGateValveJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.SheetGateValveTCP", "EntityTCP")
                        .WithMany("SheetGateValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.AssemblyUnitSealingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.AssemblyUnitSealing", "Entity")
                        .WithMany("AssemblyUnitSealingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("AssemblyUnitSealingJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.AssemblyUnitSealingTCP", "EntityTCP")
                        .WithMany("AssemblyUnitSealingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.BallValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.BallValve", "Entity")
                        .WithMany("BallValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("BallValveJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.BallValveTCP", "EntityTCP")
                        .WithMany("BallValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCase", "Entity")
                        .WithMany("CastGateValveCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CastGateValveCaseJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCaseTCP", "EntityTCP")
                        .WithMany("CastGateValveCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCoverJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", "Entity")
                        .WithMany("CastGateValveCoverJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CastGateValveCoverJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCoverTCP", "EntityTCP")
                        .WithMany("CastGateValveCoverJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterDiskJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterDisk", "Entity")
                        .WithMany("ShutterDiskJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ShutterDiskJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterDiskTCP", "EntityTCP")
                        .WithMany("ShutterDiskJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterGuideJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterGuide", "Entity")
                        .WithMany("ShutterGuideJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ShutterGuideJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterGuideTCP", "EntityTCP")
                        .WithMany("ShutterGuideJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Entity")
                        .WithMany("ShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterTCP", "EntityTCP")
                        .WithMany("ShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CounterFlangeJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CounterFlange", "Entity")
                        .WithMany("CounterFlangeJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CounterFlangeJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CounterFlangeTCP", "EntityTCP")
                        .WithMany("CounterFlangeJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CoverSealingRingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CoverSealingRing", "Entity")
                        .WithMany("CoverSealingRingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoverSealingRingJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CoverSealingRingTCP", "EntityTCP")
                        .WithMany("CoverSealingRingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.FrontalSaddleSealingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.FrontalSaddleSealing", "Entity")
                        .WithMany("FrontalSaddleSealingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("FrontalSaddleSealingJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.FrontalSaddleSealingTCP", "EntityTCP")
                        .WithMany("FrontalSaddleSealingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.GateJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Gate", "Entity")
                        .WithMany("GateJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("GateJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.GateTCP", "EntityTCP")
                        .WithMany("GateJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.NozzleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Nozzle", "Entity")
                        .WithMany("NozzleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("NozzleJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.NozzleTCP", "EntityTCP")
                        .WithMany("NozzleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.BronzeSleeveShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.BronzeSleeveShutter", "Entity")
                        .WithMany("BronzeSleeveShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("BronzeSleeveShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.BronzeSleeveShutterTCP", "EntityTCP")
                        .WithMany("BronzeSleeveShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ReverseShutterCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ReverseShutterCase", "Entity")
                        .WithMany("ReverseShutterCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ReverseShutterCaseJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ReverseShutterCaseTCP", "EntityTCP")
                        .WithMany("ReverseShutterCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ShaftShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", "Entity")
                        .WithMany("ShaftShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ShaftShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ShaftShutterTCP", "EntityTCP")
                        .WithMany("ShaftShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SlamShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SlamShutter", "Entity")
                        .WithMany("SlamShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SlamShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SlamShutterTCP", "EntityTCP")
                        .WithMany("SlamShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SteelSleeveShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SteelSleeveShutter", "Entity")
                        .WithMany("SteelSleeveShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SteelSleeveShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SteelSleeveShutterTCP", "EntityTCP")
                        .WithMany("SteelSleeveShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.StubShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.StubShutter", "Entity")
                        .WithMany("StubShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("StubShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.StubShutterTCP", "EntityTCP")
                        .WithMany("StubShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.RunningSleeveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.RunningSleeve", "Entity")
                        .WithMany("RunningSleeveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("RunningSleeveJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.RunningSleeveTCP", "EntityTCP")
                        .WithMany("RunningSleeveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SaddleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Saddle", "Entity")
                        .WithMany("SaddleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SaddleJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.SaddleTCP", "EntityTCP")
                        .WithMany("SaddleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewNutJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ScrewNut", "Entity")
                        .WithMany("ScrewNutJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ScrewNutJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ScrewNutTCP", "EntityTCP")
                        .WithMany("ScrewNutJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewStudJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ScrewStud", "Entity")
                        .WithMany("ScrewStudJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ScrewStudJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ScrewStudTCP", "EntityTCP")
                        .WithMany("ScrewStudJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ShearPinJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ShearPin", "Entity")
                        .WithMany("ShearPinJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ShearPinJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ShearPinTCP", "EntityTCP")
                        .WithMany("ShearPinJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpindleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Spindle", "Entity")
                        .WithMany("SpindleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SpindleJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.SpindleTCP", "EntityTCP")
                        .WithMany("SpindleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpringJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Spring", "Entity")
                        .WithMany("SpringJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SpringJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.SpringTCP", "EntityTCP")
                        .WithMany("SpringJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseBottomJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", "Entity")
                        .WithMany("CaseBottomJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CaseBottomJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseBottomTCP", "EntityTCP")
                        .WithMany("CaseBottomJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseEdgeJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseEdge", "Entity")
                        .WithMany("CaseEdgeJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CaseEdgeJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseEdgeTCP", "EntityTCP")
                        .WithMany("CaseEdgeJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseFlangeJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", "Entity")
                        .WithMany("CaseFlangeJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CaseFlangeJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseFlangeTCP", "EntityTCP")
                        .WithMany("CaseFlangeJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCase", "Entity")
                        .WithMany("CompactGateValveCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CompactGateValveCaseJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCaseTCP", "EntityTCP")
                        .WithMany("CompactGateValveCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCoverJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCover", "Entity")
                        .WithMany("CompactGateValveCoverJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CompactGateValveCoverJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCoverTCP", "EntityTCP")
                        .WithMany("CompactGateValveCoverJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverFlangeJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", "Entity")
                        .WithMany("CoverFlangeJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoverFlangeJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverFlangeTCP", "EntityTCP")
                        .WithMany("CoverFlangeJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverSleeveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", "Entity")
                        .WithMany("CoverSleeveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoverSleeveJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverSleeveTCP", "EntityTCP")
                        .WithMany("CoverSleeveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.FrontWallJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", "Entity")
                        .WithMany("FrontWallJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("FrontWallJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.FrontWallTCP", "EntityTCP")
                        .WithMany("FrontWallJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCase", "Entity")
                        .WithMany("SheetGateValveCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SheetGateValveCaseJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCaseTCP", "EntityTCP")
                        .WithMany("SheetGateValveCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCoverJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCover", "Entity")
                        .WithMany("SheetGateValveCoverJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SheetGateValveCoverJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCoverTCP", "EntityTCP")
                        .WithMany("SheetGateValveCoverJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SideWallJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.SideWall", "Entity")
                        .WithMany("SideWallJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SideWallJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SideWallTCP", "EntityTCP")
                        .WithMany("SideWallJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.WeldNozzleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", "Entity")
                        .WithMany("WeldNozzleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("WeldNozzleJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.WeldNozzleTCP", "EntityTCP")
                        .WithMany("WeldNozzleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.FactoryInspectionJournal", b =>
                {
                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("FactoryInspectionJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.FactoryInspectionTCP", "EntityTCP")
                        .WithMany("FactoryIspectionJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.AbovegroundCoatingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.AnticorrosiveCoating.AbovegroundCoating", "Entity")
                        .WithMany("AbovegroundCoatingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("AbovegroundCoatingJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.AnticorrosiveCoating.AnticorrosiveCoatingTCP", "EntityTCP")
                        .WithMany("AbovegroundCoatingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.AbrasiveMaterialJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.AnticorrosiveCoating.AbrasiveMaterial", "Entity")
                        .WithMany("AbrasiveMaterialJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("AbrasiveMaterialJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.AnticorrosiveCoating.AnticorrosiveCoatingTCP", "EntityTCP")
                        .WithMany("AbrasiveMaterialJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.UndercoatJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.AnticorrosiveCoating.Undercoat", "Entity")
                        .WithMany("UndercoatJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("UndercoatJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.AnticorrosiveCoating.AnticorrosiveCoatingTCP", "EntityTCP")
                        .WithMany("UndercoatJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.AnticorrosiveCoating.UndergroundCoatingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.AnticorrosiveCoating.UndergroundCoating", "Entity")
                        .WithMany("UndergroundCoatingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("UndergroundCoatingJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.AnticorrosiveCoating.AnticorrosiveCoatingTCP", "EntityTCP")
                        .WithMany("UndergroundCoatingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.ControlWeldJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.ControlWeld", "Entity")
                        .WithMany("ControlWeldJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ControlWeldJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.ControlWeldTCP", "EntityTCP")
                        .WithMany("ControlWeldJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.ForgingMaterialJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.ForgingMaterial", "Entity")
                        .WithMany("ForgingMaterialJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ForgingMaterialJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.MetalMaterialTCP", "EntityTCP")
                        .WithMany("ForgingMaterialJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.PipeMaterialJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.PipeMaterial", "Entity")
                        .WithMany("PipeMaterialJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("PipeMaterialJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.MetalMaterialTCP", "EntityTCP")
                        .WithMany()
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.RolledMaterialJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.RolledMaterial", "Entity")
                        .WithMany("RolledMaterialJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("RolledMaterialJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.MetalMaterialTCP", "EntityTCP")
                        .WithMany("RolledMaterialJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.SheetMaterialJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.SheetMaterial", "Entity")
                        .WithMany("SheetMaterialJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SheetMaterialJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.MetalMaterialTCP", "EntityTCP")
                        .WithMany("SheetMaterialJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.StoresControlJournal", b =>
                {
                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("StoresControlJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.StoresControlTCP", "EntityTCP")
                        .WithMany("StoresControlJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Materials.WeldingMaterialJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Materials.WeldingMaterial", "Entity")
                        .WithMany("WeldingMaterialJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("WeldingMaterialJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Materials.WeldingMaterialTCP", "EntityTCP")
                        .WithMany("WeldingMaterialJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.PIDJournal", b =>
                {
                    b.HasOne("DataLayer.PID", "Entity")
                        .WithMany("PIDJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("PIDJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.PIDTCP", "EntityTCP")
                        .WithMany("PIDJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingChemicalCompositionJournal", b =>
                {
                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoatingChemicalCompositionJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Periodical.CoatingChemicalCompositionTCP", "EntityTCP")
                        .WithMany("CoatingChemicalCompositionJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingPlasticityJournal", b =>
                {
                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoatingPlasticityJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Periodical.CoatingPlasticityTCP", "EntityTCP")
                        .WithMany("CoatingPlasticityJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingPorosityJournal", b =>
                {
                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoatingPorosityJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Periodical.CoatingPorosityTCP", "EntityTCP")
                        .WithMany("CoatingPorosityJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.CoatingProtectivePropertiesJournal", b =>
                {
                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CoatingProtectivePropertiesJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Periodical.CoatingProtectivePropertiesTCP", "EntityTCP")
                        .WithMany("CoatingProtectivePropertiesJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.DegreasingChemicalCompositionJournal", b =>
                {
                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("DegreasingChemicalCompositionJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Periodical.DegreasingChemicalCompositionTCP", "EntityTCP")
                        .WithMany("DegreasingChemicalCompositionJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.NDTControlJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Periodical.NDTControl", "Entity")
                        .WithMany("NDTControlJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("NDTControls")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Periodical.NDTControlTCP", "EntityTCP")
                        .WithMany("NDTControlJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Periodical.WeldingProceduresJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Periodical.WeldingProcedures", "Entity")
                        .WithMany("WeldingProceduresJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("WeldingProceduresJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Periodical.WeldingProceduresTCP", "EntityTCP")
                        .WithMany("WeldingProceduresJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.PID", b =>
                {
                    b.HasOne("DataLayer.ProductType", "ProductType")
                        .WithMany("PIDs")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("DataLayer.Specification", "Specification")
                        .WithMany("PIDs")
                        .HasForeignKey("SpecificationId");
                });

            modelBuilder.Entity("DataLayer.Specification", b =>
                {
                    b.HasOne("DataLayer.Customer", "Customer")
                        .WithMany("Specifications")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.BaseTCP", b =>
                {
                    b.HasOne("DataLayer.OperationType", "OperationType")
                        .WithMany("BaseTCPs")
                        .HasForeignKey("OperationNameId");

                    b.HasOne("DataLayer.ProductType", "ProductType")
                        .WithMany("BaseTCPs")
                        .HasForeignKey("ProductTypeId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Gate", "Gate")
                        .WithOne("BaseValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseValve", "GateId");

                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Shutter")
                        .WithOne("BaseValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseValve", "ShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.ReverseShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ReverseShutterCase", "ReverseShutterCase")
                        .WithOne("ReverseShutter")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutterCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", "ShaftShutter")
                        .WithOne("ReverseShutter")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ShaftShutterId");

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SlamShutter", "SlamShutter")
                        .WithOne("ReverseShutter")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.ReverseShutter", "SlamShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CoverSealingRing", "CoverSealingRing")
                        .WithOne("CastGateValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", "CoverSealingRingId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", "CoverFlange")
                        .WithOne("WeldGateValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", "CoverFlangeId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", "CoverSleeve")
                        .WithOne("WeldGateValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", "CoverSleeveId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseWeldValve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "WeldGateValveCase")
                        .WithOne("BaseWeldValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseWeldValve", "WeldGateValveCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", "WeldGateValveCover")
                        .WithOne("BaseWeldValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseWeldValve", "WeldGateValveCoverId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.CastGateValve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCase", "CastGateValveCase")
                        .WithOne("CastGateValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.CastGateValve", "CastGateValveCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", "CastGateValveCover")
                        .WithOne("CastGateValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.CastGateValve", "CastGateValveCoverId");
                });
#pragma warning restore 612, 618
        }
    }
}
