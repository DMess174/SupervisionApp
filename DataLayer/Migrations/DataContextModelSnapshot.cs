// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("DataLayer.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<int?>("GateId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("PIDId");

                    b.Property<int?>("ShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("GateId")
                        .IsUnique();

                    b.HasIndex("PIDId");

                    b.HasIndex("ShutterId")
                        .IsUnique();

                    b.ToTable("BaseValve");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewNut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValveId");

                    b.Property<int>("ScrewNutAmount");

                    b.Property<int>("ScrewNutId");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("ScrewNutId");

                    b.ToTable("BaseValveWithScrewNuts");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewStud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValveId");

                    b.Property<int>("ScrewStudAmount");

                    b.Property<int>("ScrewStudId");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("ScrewStudId");

                    b.ToTable("BaseValveWithScrewStuds");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssemblyUnitSealingId");

                    b.Property<int>("BaseValveId");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyUnitSealingId");

                    b.HasIndex("BaseValveId");

                    b.ToTable("BaseValveWithSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSpring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValveId");

                    b.Property<int>("SpringAmount");

                    b.Property<int>("SpringId");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.HasIndex("SpringId");

                    b.ToTable("BaseValveWithSprings");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.ReverseShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("PIDId");

                    b.Property<int?>("ReverseShutterCaseId");

                    b.Property<int?>("ShaftShutterId");

                    b.Property<int?>("SlamShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PIDId");

                    b.HasIndex("ReverseShutterCaseId")
                        .IsUnique();

                    b.HasIndex("ShaftShutterId")
                        .IsUnique();

                    b.HasIndex("SlamShutterId")
                        .IsUnique();

                    b.ToTable("ShutterReverses");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.AssemblyUnitSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Amount");

                    b.Property<int?>("AmountUsed");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Series");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("AssemblyUnitSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BallValve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BaseValveId");

                    b.Property<string>("Diameter");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Pressure");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.ToTable("BallValve");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BaseCastingCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("BaseCastingCase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseCastingCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BaseValveCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("RunningSleeveId");

                    b.Property<int?>("SpindleId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("RunningSleeveId")
                        .IsUnique();

                    b.HasIndex("SpindleId")
                        .IsUnique();

                    b.ToTable("BaseValveCover");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Shutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterDisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ShutterId");

                    b.ToTable("ShutterDisks");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ShutterId");

                    b.ToTable("ShutterGuides");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CoverSealingRing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CoverSealingRings");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.FrontalSaddleSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Amount");

                    b.Property<int?>("AmountUsed");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Series");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("FrontalSaddleSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Gate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Nozzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CastingCaseId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Diameter");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("Thickness");

                    b.Property<string>("ThicknessJoin");

                    b.HasKey("Id");

                    b.HasIndex("CastingCaseId");

                    b.ToTable("Nozzles");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.BronzeSleeveShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ReverseShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ReverseShutterId");

                    b.ToTable("BronzeSleeveShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("ShaftShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.SlamShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("SlamShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.SteelSleeveShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ReverseShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ReverseShutterId");

                    b.ToTable("SteelSleeveShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.StubShutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ReverseShutterId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ReverseShutterId");

                    b.ToTable("StubShutters");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.RunningSleeve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("RunningSleeves");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Saddle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BaseValveId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.ToTable("Saddles");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SaddleWithSealing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FrontalSaddleSealingId");

                    b.Property<int>("SaddleId");

                    b.HasKey("Id");

                    b.HasIndex("FrontalSaddleSealingId");

                    b.HasIndex("SaddleId");

                    b.ToTable("SaddleWithSeals");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ScrewNut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int>("AmountUsed");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("ScrewNuts");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ScrewStud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int>("AmountUsed");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("ScrewStuds");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ShearPin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BaseValveId");

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BaseValveId");

                    b.ToTable("ShearPins");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Spindle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Spindles");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Spring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int>("AmountUsed");

                    b.Property<string>("Batch");

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Springs");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CaseBottoms");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CaseFlanges");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CoverFlanges");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<int?>("CoverSealingRingId");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CoverSealingRingId")
                        .IsUnique();

                    b.ToTable("CoverSleeves");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<int?>("WeldGateValveCaseId");

                    b.Property<int?>("WeldNozzleId");

                    b.HasKey("Id");

                    b.HasIndex("WeldGateValveCaseId");

                    b.HasIndex("WeldNozzleId")
                        .IsUnique();

                    b.ToTable("FrontWalls");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.SideWall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<int?>("WeldGateValveCaseId");

                    b.HasKey("Id");

                    b.HasIndex("WeldGateValveCaseId");

                    b.ToTable("SideWalls");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CaseBottomId");

                    b.Property<int?>("CaseFlangeId");

                    b.Property<string>("Diameter");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.Property<string>("Thickness");

                    b.HasKey("Id");

                    b.HasIndex("CaseBottomId");

                    b.HasIndex("CaseFlangeId");

                    b.ToTable("WeldGateValveCase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WeldGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CoverFlangeId");

                    b.Property<int?>("CoverSleeveId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Drawing");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CoverFlangeId");

                    b.HasIndex("CoverSleeveId");

                    b.ToTable("WeldGateValveCover");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WeldGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Drawing");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("WeldNozzles");
                });

            modelBuilder.Entity("DataLayer.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Department");

                    b.Property<string>("Name");

                    b.Property<string>("Subdivision");

                    b.HasKey("Id");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CastGateValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CastGateValveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CompactGateValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CompactGateValveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.ReverseShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ReverseShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.SheetGateValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SheetGateValveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.AssemblyUnitSealingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("AssemblyUnitSealingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.BallValveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("BallValveJournal");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CastGateValveCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCoverJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CastGateValveCoverTCPId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CastGateValveCoverTCPId");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CastGateValveCoverJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterDiskJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShutterDiskJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterGuideJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShutterGuideJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CoverSealingRingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoverSealingRingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.FrontalSaddleSealingJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("FrontalSaddleSealingJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.GateJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("GateJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.NozzleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("NozzleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.BronzeSleeveShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("BronzeSleeveShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ReverseShutterCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ReverseShutterCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ShaftShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShaftShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SlamShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SlamShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SteelSleeveShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SteelSleeveShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.StubShutterJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("StubShutterJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.RunningSleeveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("RunningSleeveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SaddleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SaddleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewNutJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ScrewNutJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewStudJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ScrewStudJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ShearPinJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("ShearPinJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpindleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SpindleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpringJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SpringJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseBottomJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CaseBottomJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseFlangeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CaseFlangeJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CompactGateValveCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCoverJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CompactGateValveCoverJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverFlangeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoverFlangeJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverSleeveJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("CoverSleeveJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.FrontWallJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("FrontWallJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCaseJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SheetGateValveCaseJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCoverJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SheetGateValveCoverJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SideWallJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("SideWallJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.WeldNozzleJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DetailDrawing");

                    b.Property<int?>("DetailId");

                    b.Property<string>("DetailName");

                    b.Property<string>("DetailNumber");

                    b.Property<int?>("InspectorId");

                    b.Property<string>("JournalNumber");

                    b.Property<string>("Point");

                    b.Property<int?>("PointId");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("PointId");

                    b.ToTable("WeldNozzleJournals");
                });

            modelBuilder.Entity("DataLayer.Journals.JournalNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsHidden");

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.ToTable("JournalNumbers");
                });

            modelBuilder.Entity("DataLayer.PID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("Climatic");

                    b.Property<string>("ConnectionType");

                    b.Property<string>("DN");

                    b.Property<string>("DriveType");

                    b.Property<string>("EarthquakeResistance");

                    b.Property<string>("Number");

                    b.Property<string>("PN");

                    b.Property<int?>("ProductTypeId");

                    b.Property<DateTime?>("ShippingDate");

                    b.Property<int?>("SpecificationId");

                    b.Property<string>("TechDocumentation");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("PIDs");
                });

            modelBuilder.Entity("DataLayer.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("DataLayer.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Consignee");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Facility");

                    b.Property<string>("Number");

                    b.Property<string>("Program");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.CastGateValveTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CastGateValveTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.CompactGateValveTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CompactGateValveTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.ReverseShutterTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ReverseShutterTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.AssemblyUnits.SheetGateValveTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SheetGateValveTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.AssemblyUnitSealingTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("AssemblyUnitSealingTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.BallValveTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("BallValveTCP");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCaseTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CastGateValveCaseTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCoverTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CastGateValveCoverTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterDiskTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ShutterDiskTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterGuideTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ShutterGuideTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ShutterTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.CoverSealingRingTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CoverSealingRingTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.FrontalSaddleSealingTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("FrontalSaddleSealingTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.GateTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("GateTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.NozzleTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("NozzleTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.BronzeSleeveShutterTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("BronzeSleeveShutterTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ReverseShutterCaseTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ReverseShutterCaseTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ShaftShutterTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ShaftShutterTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SlamShutterTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SlamShutterTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SteelSleeveShutterTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SteelSleeveShutterTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.StubShutterTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("StubShutterTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.RunningSleeveTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("RunningSleeveTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.SaddleTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SaddleTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ScrewNutTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ScrewNutTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ScrewStudTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ScrewStudTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.ShearPinTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("ShearPinTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.SpindleTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SpindleTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.SpringTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SpringTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseBottomTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CaseBottomTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseFlangeTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CaseFlangeTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCaseTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CompactGateValveCaseTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCoverTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CompactGateValveCoverTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverFlangeTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CoverFlangeTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverSleeveTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("CoverSleeveTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.FrontWallTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("FrontWallTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCaseTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SheetGateValveCaseTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCoverTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SheetGateValveCoverTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SideWallTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("SideWallTCPs");
                });

            modelBuilder.Entity("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.WeldNozzleTCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("OperationName");

                    b.Property<string>("Point");

                    b.HasKey("Id");

                    b.ToTable("WeldNozzleTCPs");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseWeldValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseValve");

                    b.Property<int?>("WeldGateValveCaseId");

                    b.Property<int?>("WeldGateValveCoverId");

                    b.HasIndex("WeldGateValveCaseId")
                        .IsUnique();

                    b.HasIndex("WeldGateValveCoverId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("BaseWeldValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.CastGateValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseValve");

                    b.Property<int?>("CastGateValveCaseId");

                    b.Property<int?>("CastGateValveCoverId");

                    b.HasIndex("CastGateValveCaseId")
                        .IsUnique();

                    b.HasIndex("CastGateValveCoverId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("CastGateValve");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.BaseCastingCase");

                    b.HasDiscriminator().HasValue("CastGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.ReverseShutterCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.BaseCastingCase");

                    b.HasDiscriminator().HasValue("ReverseShutterCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.BaseValveCover");

                    b.Property<string>("Certificate");

                    b.Property<int?>("CoverSealingRingId");

                    b.Property<string>("Material");

                    b.Property<string>("Melt");

                    b.HasIndex("CoverSealingRingId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("CastGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase");

                    b.HasDiscriminator().HasValue("CompactGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCase", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase");

                    b.HasDiscriminator().HasValue("SheetGateValveCase");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCover", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover");

                    b.HasDiscriminator().HasValue("CompactGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCover", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover");

                    b.HasDiscriminator().HasValue("SheetGateValveCover");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.CompactGateValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseWeldValve");

                    b.HasDiscriminator().HasValue("CompactGateValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.SheetGateValve", b =>
                {
                    b.HasBaseType("DataLayer.Entities.AssemblyUnits.BaseWeldValve");

                    b.HasDiscriminator().HasValue("SheetGateValve");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Gate", "Gate")
                        .WithOne("BaseValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseValve", "GateId");

                    b.HasOne("DataLayer.PID", "PID")
                        .WithMany("BaseValves")
                        .HasForeignKey("PIDId");

                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Shutter")
                        .WithOne("BaseValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseValve", "ShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewNut", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithScrewNuts")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ScrewNut", "ScrewNut")
                        .WithMany("BaseValveWithScrewNuts")
                        .HasForeignKey("ScrewNutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithScrewStud", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithScrewStuds")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.ScrewStud", "ScrewStud")
                        .WithMany("BaseValveWithScrewStuds")
                        .HasForeignKey("ScrewStudId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSealing", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.AssemblyUnitSealing", "AssemblyUnitSealing")
                        .WithMany("BaseValveWithSeals")
                        .HasForeignKey("AssemblyUnitSealingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithSeals")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseValveWithSpring", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BaseValveWithSprings")
                        .HasForeignKey("BaseValveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Spring", "Spring")
                        .WithMany("BaseValveWithSprings")
                        .HasForeignKey("SpringId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.ReverseShutter", b =>
                {
                    b.HasOne("DataLayer.PID", "PID")
                        .WithMany("ReverseShutters")
                        .HasForeignKey("PIDId");

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ReverseShutterCase", "ReverseShutterCase")
                        .WithOne("ReverseShutter")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutterCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", "ShaftShutter")
                        .WithOne("ReverseShutter")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ShaftShutterId");

                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SlamShutter", "SlamShutter")
                        .WithOne("ReverseShutter")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.ReverseShutter", "SlamShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BallValve", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("BallValves")
                        .HasForeignKey("BaseValveId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.BaseValveCover", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.RunningSleeve", "RunningSleeve")
                        .WithOne("BaseValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.BaseValveCover", "RunningSleeveId");

                    b.HasOne("DataLayer.Entities.Detailing.Spindle", "Spindle")
                        .WithOne("BaseValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.BaseValveCover", "SpindleId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterDisk", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Shutter")
                        .WithMany("ShutterDisks")
                        .HasForeignKey("ShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterGuide", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Shutter")
                        .WithMany("ShutterGuides")
                        .HasForeignKey("ShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Nozzle", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.BaseCastingCase", "CastingCase")
                        .WithMany("Nozzles")
                        .HasForeignKey("CastingCaseId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.BronzeSleeveShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutter")
                        .WithMany("BronzeSleeveShutters")
                        .HasForeignKey("ReverseShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.SteelSleeveShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutter")
                        .WithMany("SteelSleeveShutters")
                        .HasForeignKey("ReverseShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ReverseShutterDetails.StubShutter", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "ReverseShutter")
                        .WithMany("StubShutters")
                        .HasForeignKey("ReverseShutterId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.Saddle", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("Saddles")
                        .HasForeignKey("BaseValveId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.SaddleWithSealing", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.FrontalSaddleSealing", "FrontalSaddleSealing")
                        .WithMany("SaddleWithSealings")
                        .HasForeignKey("FrontalSaddleSealingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Detailing.Saddle", "Saddle")
                        .WithMany("SaddleWithSealings")
                        .HasForeignKey("SaddleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.ShearPin", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.BaseValve", "BaseValve")
                        .WithMany("ShearPins")
                        .HasForeignKey("BaseValveId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CoverSealingRing", "CoverSealingRing")
                        .WithOne("CoverSleeve")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", "CoverSealingRingId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "GetWeldGateValveCase")
                        .WithMany("FrontWalls")
                        .HasForeignKey("WeldGateValveCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", "WeldNozzle")
                        .WithOne("FrontWall")
                        .HasForeignKey("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", "WeldNozzleId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.SideWall", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "GetWeldGateValveCase")
                        .WithMany("SideWalls")
                        .HasForeignKey("WeldGateValveCaseId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", "CaseBottom")
                        .WithMany()
                        .HasForeignKey("CaseBottomId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", "CaseFlange")
                        .WithMany()
                        .HasForeignKey("CaseFlangeId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", "CoverFlange")
                        .WithMany()
                        .HasForeignKey("CoverFlangeId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", "CoverSleeve")
                        .WithMany()
                        .HasForeignKey("CoverSleeveId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CastGateValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.CastGateValve", "Entity")
                        .WithMany("CastGateValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CastGateValveJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.CastGateValveTCP", "EntityTCP")
                        .WithMany("CastGateValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.CompactGateValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.CompactGateValve", "Entity")
                        .WithMany("CompactGateValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.CompactGateValveTCP", "EntityTCP")
                        .WithMany("CompactGateValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.ReverseShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.ReverseShutter", "Entity")
                        .WithMany("ReverseShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ReverseShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.ReverseShutterTCP", "EntityTCP")
                        .WithMany("ReverseShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.AssemblyUnits.SheetGateValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.AssemblyUnits.SheetGateValve", "Entity")
                        .WithMany("SheetGateValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.AssemblyUnits.SheetGateValveTCP", "EntityTCP")
                        .WithMany("SheetGateValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.AssemblyUnitSealingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.AssemblyUnitSealing", "Entity")
                        .WithMany("AssemblyUnitSealingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.AssemblyUnitSealingTCP", "EntityTCP")
                        .WithMany("AssemblyUnitSealingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.BallValveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.BallValve", "Entity")
                        .WithMany("BallValveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.BallValveTCP", "EntityTCP")
                        .WithMany("BallValveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCase", "Entity")
                        .WithMany("CastGateValveCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("CastGateValveCaseJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCaseTCP", "EntityTCP")
                        .WithMany("CastGateValveCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CastGateValveDetails.CastGateValveCoverJournal", b =>
                {
                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCoverTCP")
                        .WithMany("CastGateValveCoverJournals")
                        .HasForeignKey("CastGateValveCoverTCPId");

                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", "Entity")
                        .WithMany("CastGateValveCoverJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CastGateValveDetails.CastGateValveCaseTCP", "EntityTCP")
                        .WithMany()
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterDiskJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterDisk", "Entity")
                        .WithMany("ShutterDiskJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterDiskTCP", "EntityTCP")
                        .WithMany("ShutterDiskJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterGuideJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.ShutterGuide", "Entity")
                        .WithMany("ShutterGuideJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterGuideTCP", "EntityTCP")
                        .WithMany("ShutterGuideJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CompactGateValveDetails.ShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.Shutter", "Entity")
                        .WithMany("ShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CompactGateValveDetails.ShutterTCP", "EntityTCP")
                        .WithMany("ShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.CoverSealingRingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CoverSealingRing", "Entity")
                        .WithMany("CoverSealingRingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.CoverSealingRingTCP", "EntityTCP")
                        .WithMany("CoverSealingRingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.FrontalSaddleSealingJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.FrontalSaddleSealing", "Entity")
                        .WithMany("FrontalSaddleSealingJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.FrontalSaddleSealingTCP", "EntityTCP")
                        .WithMany("FrontalSaddleSealingJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.GateJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Gate", "Entity")
                        .WithMany("GateJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.GateTCP", "EntityTCP")
                        .WithMany("GateJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.NozzleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Nozzle", "Entity")
                        .WithMany("NozzleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("NozzleJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.NozzleTCP", "EntityTCP")
                        .WithMany("NozzleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.BronzeSleeveShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.BronzeSleeveShutter", "Entity")
                        .WithMany("BronzeSleeveShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("BronzeSleeveShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.BronzeSleeveShutterTCP", "EntityTCP")
                        .WithMany("BronzeSleeveShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ReverseShutterCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ReverseShutterCase", "Entity")
                        .WithMany("ReverseShutterCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ReverseShutterCaseJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ReverseShutterCaseTCP", "EntityTCP")
                        .WithMany("ReverseShutterCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.ShaftShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.ShaftShutter", "Entity")
                        .WithMany("ShaftShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("ShaftShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.ShaftShutterTCP", "EntityTCP")
                        .WithMany("ShaftShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SlamShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SlamShutter", "Entity")
                        .WithMany("SlamShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SlamShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SlamShutterTCP", "EntityTCP")
                        .WithMany("SlamShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.SteelSleeveShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.SteelSleeveShutter", "Entity")
                        .WithMany("SteelSleeveShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("SteelSleeveShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.SteelSleeveShutterTCP", "EntityTCP")
                        .WithMany("SteelSleeveShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ReverseShutterDetails.StubShutterJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ReverseShutterDetails.StubShutter", "Entity")
                        .WithMany("StubShutterJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany("StubShutterJournals")
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ReverseShutterDetails.StubShutterTCP", "EntityTCP")
                        .WithMany("StubShutterJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.RunningSleeveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.RunningSleeve", "Entity")
                        .WithMany("RunningSleeveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.RunningSleeveTCP", "EntityTCP")
                        .WithMany("RunningSleeveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SaddleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Saddle", "Entity")
                        .WithMany("SaddleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.SaddleTCP", "EntityTCP")
                        .WithMany("SaddleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewNutJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ScrewNut", "Entity")
                        .WithMany("ScrewNutJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ScrewNutTCP", "EntityTCP")
                        .WithMany("ScrewNutJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ScrewStudJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ScrewStud", "Entity")
                        .WithMany("ScrewStudJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ScrewStudTCP", "EntityTCP")
                        .WithMany("ScrewStudJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.ShearPinJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.ShearPin", "Entity")
                        .WithMany("ShearPinJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.ShearPinTCP", "EntityTCP")
                        .WithMany("ShearPinJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpindleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Spindle", "Entity")
                        .WithMany("SpindleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.SpindleTCP", "EntityTCP")
                        .WithMany("SpindleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.SpringJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.Spring", "Entity")
                        .WithMany("SpringJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.SpringTCP", "EntityTCP")
                        .WithMany("SpringJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseBottomJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseBottom", "Entity")
                        .WithMany("CaseBottomJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseBottomTCP", "EntityTCP")
                        .WithMany("CaseBottomJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CaseFlangeJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CaseFlange", "Entity")
                        .WithMany("CaseFlangeJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CaseFlangeTCP", "EntityTCP")
                        .WithMany("CaseFlangeJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCase", "Entity")
                        .WithMany("CompactGateValveCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCaseTCP", "EntityTCP")
                        .WithMany("CompactGateValveCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CompactGateValveCoverJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CompactGateValveDetails.CompactGateValveCover", "Entity")
                        .WithMany("CompactGateValveCoverJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CompactGateValveCoverTCP", "EntityTCP")
                        .WithMany("CompactGateValveCoverJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverFlangeJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverFlange", "Entity")
                        .WithMany("CoverFlangeJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverFlangeTCP", "EntityTCP")
                        .WithMany("CoverFlangeJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.CoverSleeveJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.CoverSleeve", "Entity")
                        .WithMany("CoverSleeveJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.CoverSleeveTCP", "EntityTCP")
                        .WithMany("CoverSleeveJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.FrontWallJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.FrontWall", "Entity")
                        .WithMany("FrontWallJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.FrontWallTCP", "EntityTCP")
                        .WithMany("FrontWallJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCaseJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCase", "Entity")
                        .WithMany("SheetGateValveCaseJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCaseTCP", "EntityTCP")
                        .WithMany("SheetGateValveCaseJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SheetGateValveCoverJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.SheetGateValveDetails.SheetGateValveCover", "Entity")
                        .WithMany("SheetGateValveCoverJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SheetGateValveCoverTCP", "EntityTCP")
                        .WithMany("SheetGateValveCoverJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.SideWallJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.SideWall", "Entity")
                        .WithMany("SideWallJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.SideWallTCP", "EntityTCP")
                        .WithMany("SideWallJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.Journals.Detailing.WeldGateValveDetails.WeldNozzleJournal", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldNozzle", "Entity")
                        .WithMany("WeldNozzleJournals")
                        .HasForeignKey("DetailId");

                    b.HasOne("DataLayer.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("DataLayer.TechnicalControlPlans.Detailing.WeldGateValveDetails.WeldNozzleTCP", "EntityTCP")
                        .WithMany("WeldNozzleJournals")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DataLayer.PID", b =>
                {
                    b.HasOne("DataLayer.ProductType", "ProductType")
                        .WithMany("PIDs")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("DataLayer.Specification", "Specification")
                        .WithMany("PIDs")
                        .HasForeignKey("SpecificationId");
                });

            modelBuilder.Entity("DataLayer.Specification", b =>
                {
                    b.HasOne("DataLayer.Customer", "Customer")
                        .WithMany("Specifications")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.BaseWeldValve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCase", "WeldGateValveCase")
                        .WithOne("BaseWeldValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseWeldValve", "WeldGateValveCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.WeldGateValveDetails.WeldGateValveCover", "WeldGateValveCover")
                        .WithOne("BaseWeldValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.BaseWeldValve", "WeldGateValveCoverId");
                });

            modelBuilder.Entity("DataLayer.Entities.AssemblyUnits.CastGateValve", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCase", "CastGateValveCase")
                        .WithOne("CastGateValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.CastGateValve", "CastGateValveCaseId");

                    b.HasOne("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", "CastGateValveCover")
                        .WithOne("CastGateValve")
                        .HasForeignKey("DataLayer.Entities.AssemblyUnits.CastGateValve", "CastGateValveCoverId");
                });

            modelBuilder.Entity("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", b =>
                {
                    b.HasOne("DataLayer.Entities.Detailing.CoverSealingRing", "CoverSealingRing")
                        .WithOne("CastGateValveCover")
                        .HasForeignKey("DataLayer.Entities.Detailing.CastGateValveDetails.CastGateValveCover", "CoverSealingRingId");
                });
#pragma warning restore 612, 618
        }
    }
}
